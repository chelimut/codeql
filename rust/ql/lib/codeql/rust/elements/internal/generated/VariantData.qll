// generated by codegen, do not edit
/**
 * This module provides the generated definition of `VariantData`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ElementImpl::Impl as ElementImpl
import codeql.rust.elements.Type

/**
 * INTERNAL: This module contains the fully generated definition of `VariantData` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::VariantData` class directly.
   * Use the subclass `VariantData`, where the following predicates are available.
   */
  class VariantData extends Synth::TVariantData, ElementImpl::Element {
    override string getAPrimaryQlClass() { result = "VariantData" }

    /**
     * Gets the `index`th type of this variant data (0-based).
     */
    Type getType(int index) {
      result =
        Synth::convertTypeFromRaw(Synth::convertVariantDataToRaw(this)
              .(Raw::VariantData)
              .getType(index))
    }

    /**
     * Gets any of the types of this variant data.
     */
    final Type getAType() { result = this.getType(_) }

    /**
     * Gets the number of types of this variant data.
     */
    final int getNumberOfTypes() { result = count(int i | exists(this.getType(i))) }

    /**
     * Gets the `index`th field of this variant data (0-based).
     */
    string getField(int index) {
      result = Synth::convertVariantDataToRaw(this).(Raw::VariantData).getField(index)
    }

    /**
     * Gets any of the fields of this variant data.
     */
    final string getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this variant data.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }

    /**
     * Holds if this variant data is record.
     */
    predicate isRecord() { Synth::convertVariantDataToRaw(this).(Raw::VariantData).isRecord() }
  }
}
