// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ReferenceType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Type
import codeql.rust.elements.internal.TypeImpl::Impl as TypeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `ReferenceType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::ReferenceType` class directly.
   * Use the subclass `ReferenceType`, where the following predicates are available.
   */
  class ReferenceType extends Synth::TReferenceType, TypeImpl::Type {
    override string getAPrimaryQlClass() { result = "ReferenceType" }

    /**
     * Gets the type of this reference type.
     */
    Type getType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertReferenceTypeToRaw(this)
              .(Raw::ReferenceType)
              .getType())
    }

    /**
     * Gets the lifetime of this reference type, if it exists.
     */
    string getLifetime() {
      result = Synth::convertReferenceTypeToRaw(this).(Raw::ReferenceType).getLifetime()
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }

    /**
     * Holds if this reference type is mut.
     */
    predicate isMut() { Synth::convertReferenceTypeToRaw(this).(Raw::ReferenceType).isMut() }
  }
}
