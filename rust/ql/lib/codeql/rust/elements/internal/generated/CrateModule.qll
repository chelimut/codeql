// generated by codegen, do not edit
/**
 * This module provides the generated definition of `CrateModule`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ModuleContainer
import codeql.rust.elements.internal.ModuleContainerImpl::Impl as ModuleContainerImpl
import codeql.rust.elements.ValueItem

/**
 * INTERNAL: This module contains the fully generated definition of `CrateModule` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::CrateModule` class directly.
   * Use the subclass `CrateModule`, where the following predicates are available.
   */
  class CrateModule extends Synth::TCrateModule, ModuleContainerImpl::ModuleContainer {
    override string getAPrimaryQlClass() { result = "CrateModule" }

    /**
     * Gets the parent of this crate module.
     */
    ModuleContainer getParent() {
      result =
        Synth::convertModuleContainerFromRaw(Synth::convertCrateModuleToRaw(this)
              .(Raw::CrateModule)
              .getParent())
    }

    /**
     * Gets the name of this crate module.
     */
    string getName() { result = Synth::convertCrateModuleToRaw(this).(Raw::CrateModule).getName() }

    /**
     * Gets the `index`th value of this crate module (0-based).
     */
    ValueItem getValue(int index) {
      result =
        Synth::convertValueItemFromRaw(Synth::convertCrateModuleToRaw(this)
              .(Raw::CrateModule)
              .getValue(index))
    }

    /**
     * Gets any of the values of this crate module.
     */
    final ValueItem getAValue() { result = this.getValue(_) }

    /**
     * Gets the number of values of this crate module.
     */
    final int getNumberOfValues() { result = count(int i | exists(this.getValue(i))) }
  }
}
