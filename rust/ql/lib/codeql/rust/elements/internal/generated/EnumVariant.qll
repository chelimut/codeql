// generated by codegen, do not edit
/**
 * This module provides the generated definition of `EnumVariant`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ElementImpl::Impl as ElementImpl
import codeql.rust.elements.VariantData

/**
 * INTERNAL: This module contains the fully generated definition of `EnumVariant` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::EnumVariant` class directly.
   * Use the subclass `EnumVariant`, where the following predicates are available.
   */
  class EnumVariant extends Synth::TEnumVariant, ElementImpl::Element {
    override string getAPrimaryQlClass() { result = "EnumVariant" }

    /**
     * Gets the name of this enum variant.
     */
    string getName() { result = Synth::convertEnumVariantToRaw(this).(Raw::EnumVariant).getName() }

    /**
     * Gets the content of this enum variant, if it exists.
     */
    VariantData getContent() {
      result =
        Synth::convertVariantDataFromRaw(Synth::convertEnumVariantToRaw(this)
              .(Raw::EnumVariant)
              .getContent())
    }

    /**
     * Holds if `getContent()` exists.
     */
    final predicate hasContent() { exists(this.getContent()) }
  }
}
