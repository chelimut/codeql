// generated by codegen, do not edit
/**
 * This module provides the generated definition of `FunctionType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Type
import codeql.rust.elements.internal.TypeImpl::Impl as TypeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `FunctionType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::FunctionType` class directly.
   * Use the subclass `FunctionType`, where the following predicates are available.
   */
  class FunctionType extends Synth::TFunctionType, TypeImpl::Type {
    override string getAPrimaryQlClass() { result = "FunctionType" }

    /**
     * Gets the self type of this function type, if it exists.
     */
    Type getSelfType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertFunctionTypeToRaw(this)
              .(Raw::FunctionType)
              .getSelfType())
    }

    /**
     * Holds if `getSelfType()` exists.
     */
    final predicate hasSelfType() { exists(this.getSelfType()) }

    /**
     * Gets the `index`th parameter of this function type (0-based).
     */
    Type getParam(int index) {
      result =
        Synth::convertTypeFromRaw(Synth::convertFunctionTypeToRaw(this)
              .(Raw::FunctionType)
              .getParam(index))
    }

    /**
     * Gets any of the parameters of this function type.
     */
    final Type getAParam() { result = this.getParam(_) }

    /**
     * Gets the number of parameters of this function type.
     */
    final int getNumberOfParams() { result = count(int i | exists(this.getParam(i))) }

    /**
     * Gets the ret type of this function type.
     */
    Type getRetType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertFunctionTypeToRaw(this)
              .(Raw::FunctionType)
              .getRetType())
    }

    /**
     * Holds if this function type is const.
     */
    predicate isConst() { Synth::convertFunctionTypeToRaw(this).(Raw::FunctionType).isConst() }

    /**
     * Holds if this function type is async.
     */
    predicate isAsync() { Synth::convertFunctionTypeToRaw(this).(Raw::FunctionType).isAsync() }

    /**
     * Holds if this function type is unsafe.
     */
    predicate isUnsafe() { Synth::convertFunctionTypeToRaw(this).(Raw::FunctionType).isUnsafe() }

    /**
     * Holds if this function type has varargs.
     */
    predicate hasVarargs() {
      Synth::convertFunctionTypeToRaw(this).(Raw::FunctionType).hasVarargs()
    }
  }
}
