// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TupleType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Type
import codeql.rust.elements.internal.TypeImpl::Impl as TypeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TupleType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::TupleType` class directly.
   * Use the subclass `TupleType`, where the following predicates are available.
   */
  class TupleType extends Synth::TTupleType, TypeImpl::Type {
    override string getAPrimaryQlClass() { result = "TupleType" }

    /**
     * Gets the `index`th field of this tuple type (0-based).
     */
    Type getField(int index) {
      result =
        Synth::convertTypeFromRaw(Synth::convertTupleTypeToRaw(this)
              .(Raw::TupleType)
              .getField(index))
    }

    /**
     * Gets any of the fields of this tuple type.
     */
    final Type getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple type.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}
