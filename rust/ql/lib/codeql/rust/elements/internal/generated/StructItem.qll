// generated by codegen, do not edit
/**
 * This module provides the generated definition of `StructItem`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.TypeItemImpl::Impl as TypeItemImpl
import codeql.rust.elements.VariantData

/**
 * INTERNAL: This module contains the fully generated definition of `StructItem` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::StructItem` class directly.
   * Use the subclass `StructItem`, where the following predicates are available.
   */
  class StructItem extends Synth::TStructItem, TypeItemImpl::TypeItem {
    override string getAPrimaryQlClass() { result = "StructItem" }

    /**
     * Gets the name of this struct item.
     */
    string getName() { result = Synth::convertStructItemToRaw(this).(Raw::StructItem).getName() }

    /**
     * Gets the content of this struct item, if it exists.
     */
    VariantData getContent() {
      result =
        Synth::convertVariantDataFromRaw(Synth::convertStructItemToRaw(this)
              .(Raw::StructItem)
              .getContent())
    }

    /**
     * Holds if `getContent()` exists.
     */
    final predicate hasContent() { exists(this.getContent()) }

    /**
     * Holds if this struct item is union.
     */
    predicate isUnion() { Synth::convertStructItemToRaw(this).(Raw::StructItem).isUnion() }
  }
}
